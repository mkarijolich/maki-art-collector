{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","fetchAllMedium","Searchable","props","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","results","console","log","Feature","featuredResult","title","dated","images","primaryimageurl","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","id","map","person","displayname","image","key","baseimageurl","src","alt","Loading","Preview","setFeaturedResult","searchResults","info","fetchPage","pageUrl","error","disabled","prev","next","record","index","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","mediumList","setMediumList","setMedium","useEffect","Promise","all","then","centuries","catch","onSubmit","htmlFor","type","placeholder","onChange","target","length","name","item","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f975e5a7.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=919b5231-cccf-405f-9ac7-857c22fff699';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n    // const b = JSON.parse(localStorage.getItem('centuries'));\n    // console.log(b);\n    // return b;\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function fetchAllMedium() {\n  if (localStorage.getItem('medium')) {\n    return JSON.parse(localStorage.getItem('medium'));\n  }\n\n  const url = `${ BASE_URL }/medium?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('medium', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React, { Fragment } from 'react';\n\n// // Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from '../api';\n\n// /**\n//  * We need a new component called Searchable which:\n//  * \n//  * Has a template like this:\n//  * \n\n//  * <span className=\"content\">\n//  *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n//  * </span>\n//  *\n//  * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n//  * \n//  * When someone clicks the anchor tag, you should:\n//  * \n//  * - preventDefault on the event\n//  * - call setIsLoading, set it to true\n//  * \n//  * Then start a try/catch/finally block:\n//  * \n//  * try:\n//  *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n//  *  - send the result to setSearchResults (which will update the Preview component)\n//  * catch: \n//  *  - console.error the error\n//  * finally:\n//  *  - call setIsLoading, set it to false\n//  */\nconst Searchable = (props) => {\n\n    const {\n        searchTerm,\n        searchValue,\n        setIsLoading,\n        setSearchResults\n    } = props;\n\n\n    return (\n        <span className=\"content\">\n            <a href=\"#\" onClick={\n                async (event) => {\n                    event.preventDefault();\n                    setIsLoading(true);\n                    try {\n                        const results = await fetchQueryResultsFromTermAndValue(searchTerm, searchValue)\n                        setSearchResults(results);\n                        \n                    }\n                    catch (error) {\n                        console.log(error);\n                    }\n                    finally {\n                        setIsLoading(false);\n                    }\n                }}>{searchValue}</a>\n        </span>\n\n    )\n}\n\n// /**\n//  * We need a new component called Feature which looks like this \n// when no featuredResult is passed in as a prop:\n//  * \n//  * <main id=\"feature\"></main>\n//  * \n//  * And like this when one is:\n//  * \n//  * <main id=\"feature\">\n//  *   <div className=\"object-feature\">\n//  *     <header>\n//  *       <h3>OBJECT TITLE</h3>\n//  *       <h4>WHEN IT IS DATED</h4>\n//  *     </header>\n//  *     <section className=\"facts\">\n//  *       <span className=\"title\">FACT NAME</span>\n//  *       <span className=\"content\">FACT VALUE</span>\n//  *       <span className=\"title\">NEXT FACT NAME</span>\n//  *       <span className=\"content\">NEXT FACT VALUE</span>\n//  *     </section>\n//  *     <section className=\"photos\">\n//  *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n//  *     </section>\n//  *   </div>\n//  * </main>\n//  * \n//  * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style, \n//  * technique, medium, dimensions, people, department, division, contact, creditline\n//  * \n//  * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n//  * \n//  * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n//  * \n//  * This component should be exported as default.\n//  */\nconst Feature = (props) => {\n\n    const { featuredResult, searchTerm } = props;\n\n    if (!featuredResult) {\n        return <main id=\"feature\"></main>\n    }\n    else {\n\n        const {\n            title, dated, images, primaryimageurl, description, culture, style, technique, medium, dimensions, people, department, division, contact, creditline\n        } = featuredResult;\n\n        return (\n            <main id=\"feature\">\n                <div className=\"object-feature\">\n                    <header>\n                        <h3>{title}</h3>\n                        <h4>{dated}</h4>\n                    </header>\n                    <section className=\"facts\">\n                        {description ?\n                            <Fragment>\n                                <span className=\"title\">Description</span>\n                                <span className=\"content\">{description}</span>\n                            </Fragment>\n                            : ''}\n                        {culture ?\n                            <Fragment>\n                                <span className=\"title\">Culture</span>\n                                <Searchable searchTerm='culture' searchValue={culture} {...props} />\n                            </Fragment>\n                            : ''}\n                        {style ?\n                            <Fragment>\n                                <span className=\"title\">Style</span>\n                                <span className=\"content\">{style}</span>\n                            </Fragment>\n                            : ''}\n                        {technique ?\n                            <Fragment>\n                                <span className=\"title\">Technique</span>\n                                <Searchable searchTerm='technique' searchValue={technique} {...props} />\n                            </Fragment>\n                            : ''}\n                        {medium ?\n                            <Fragment>\n                                <span className=\"title\">Medium</span>\n                                <Searchable searchTerm='medium' searchValue={medium} {...props} />\n                            </Fragment>\n                            : ''}\n                        {dimensions ?\n                            <Fragment>\n                                <span className=\"title\">Dimensions</span>\n                                <span className=\"content\">{dimensions}</span>\n                            </Fragment>\n                            : ''}\n                        {\n                            people ?\n                                people.map(person =>\n                                    <Fragment>\n                                        <span className=\"title\">Person</span>\n                                        <Searchable searchTerm=\"person\" searchValue={person.displayname} {...props} />\n                                    </Fragment>\n                                )\n                                : null\n                        }\n\n                        {department ?\n                            <Fragment>\n                                <span className=\"title\">Department</span>\n                                <span className=\"content\">{department}</span>\n                            </Fragment>\n                            : ''}\n                        {division ?\n                            <Fragment>\n                                <span className=\"title\">Division</span>\n                                <span className=\"content\">{division}</span>\n                            </Fragment>\n                            : ''}\n                        {contact ?\n                            <Fragment>\n                                <span className=\"title\">Contact</span>\n                                <span className=\"content\"><a href={contact}>{contact}</a></span>\n                            </Fragment>\n                            : ''}\n                        {creditline ?\n                            <Fragment>\n                                <span className=\"title\">Creditline</span>\n                                <span className=\"content\">{creditline}</span>\n                            </Fragment>\n                            : ''}\n                    </section>\n                    <section className=\"photos\">\n                {\n                    images ?\n                    images.map((image) => {\n                    return <img key={image.baseimageurl} src={image.baseimageurl} alt={image.baseimageurl}/>\n                })\n                    : primaryimageurl ? <img src={primaryimageurl} alt={primaryimageurl }/> : null\n                        }\n\n                    </section>\n                </div>\n            </main>\n        )\n    }\n\n\n\n\n\n}\n\n\nexport default Feature;","import React from 'react';\n\n/**\n * Create and export a component called Loading which uses this static HTML template:\n * \n * <div id=\"loading\">\n *   <h2 className=\"message\">Searching...</h2>\n * </div>\n */\n\nconst Loading = () => {\n    return (\n        <div id=\"loading\">\n        <h2 className=\"message\">Searching...</h2>\n     </div>\n    )\n    \n}\n\n\n export default Loading;","import React from 'react';\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from '../api';\n\nconst Preview = (props) => {\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   * \n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n  const {\n    setSearchResults,\n    setFeaturedResult,\n    setIsLoading,\n    searchResults: {info,records}\n  } = props;\n\n  // const {\n  //   info,\n  //   records\n  // } = props.searchResults;\n  \n  \n\n  /**\n   * Don't touch this function, it's good to go.\n   * \n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  // const renderPreviewImage = (record) => {\n  //   if (record.primaryimageurl) {\n  //     return <img src={ record.primaryimageurl } alt={ record.description } />\n  //   } \n  //     return;\n  // }\n\n  // const renderPreviewTitle = (record) => {\n  //   if(record.title){\n  //     return <h3>{ record.title }</h3>\n  //   }else{\n  //     return <h3>MISSING INFO</h3>\n  //   }\n  // };\n\n  return (\n  <aside id=\"preview\">\n    <header className=\"pagination\">\n      {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n      {\n        <button \n        disabled={ !info.prev } \n        className=\"previous\"\n        onClick={()=>{fetchPage(info.prev)}}>Previous</button>\n      }\n      \n      {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n      <button\n        disabled={ !info.next }\n        className=\"next\"\n        onClick={()=>{fetchPage(info.next)}}>Next</button>\n    </header>\n    <section className=\"results\">\n      {\n        // Here we should map over the records, and render something like this for each one:\n        records.map((record,index)=> \n          {return (\n            <div  \n              key={ index }\n              className=\"object-preview\"\n              onClick={(event) => {\n                // prevent the default\n                event.preventDefault()\n                // set the featured result to be this record, using setFeaturedResult\n                setFeaturedResult(record)\n              }}>\n              \n                {/* // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing  */}\n              {/* {renderPreviewImage(record)} */}\n              {record.primaryimageurl ? <img src={ record.primaryimageurl } alt={ record.description } /> : null }\n              {/* // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3> */}\n              {/* { renderPreviewTitle(record)} */}\n              {record.title ? <h3>{ record.title }</h3> : <h3>MISSING INFO</h3>}\n            </div>\n          )}\n        )}\n    </section>\n  </aside>\n  )\n}\n\nexport default Preview;","import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults,\n  fetchAllMedium\n} from '../api';\n\nconst Search = (props) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n\n  const {\n    setIsLoading,\n    setSearchResults\n  } = props\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   * \n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n   const [centuryList,setCenturyList] = useState([]);\n   const [classificationList,setClassificationList] = useState([]);\n   const [queryString,setQueryString] = useState('');\n   const [century,setCentury] = useState('any');\n   const [classification,setClassification] = useState('any');\n   const [mediumList,setMediumList] = useState([]);\n   const [medium,setMedium] = useState('any');\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   * \n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   * \n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => { \n    Promise.all( //get all datas before moving on\n      [\n        fetchAllCenturies(),\n        fetchAllClassifications(),\n        fetchAllMedium()\n      ]\n    )\n    .then(([centuries, classification,medium]) => {\n      setCenturyList(centuries);\n      setClassificationList(classification);\n      setMediumList(medium);\n    })\n    .catch(console.error)\n\n  }, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   * \n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   * \n   * then, in a try/catch/finally block:\n   * \n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   * \n   * catch: error to console.error\n   * \n   * finally: call setIsLoading, set it to false\n   */\n  return (\n  <form id=\"search\" onSubmit={async (event) => {\n    // write code here\n    event.preventDefault()\n    setIsLoading(true)\n\n    try{\n      const results = await fetchQueryResults({ century, classification, queryString, medium })\n      setSearchResults(results)\n    }\n    catch(error){\n      console.error(error);\n    }\n    finally{\n      setIsLoading(false)\n    }\n  }}>\n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input \n        id=\"keywords\" \n        type=\"text\" \n        placeholder=\"enter keywords...\" \n        value={queryString} \n        onChange={(event) => {\n          setQueryString(event.target.value)\n          }/* this should update the value of the query string */}/>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\n      <select \n        name=\"classification\"\n        id=\"select-classification\"\n        value={classification} \n        onChange={(event) => {\n          setClassification(event.target.value)\n          }}>\n        <option value=\"any\">Any</option>\n        {classificationList.map((item,index) =>{\n          return <option key={index} value={item.id}> {item.name} </option>})/* map over the classificationList, return an <option /> */}\n      </select>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\n      <select \n        name=\"century\" \n        id=\"select-century\"\n        value={century} \n        onChange={(event) => {\n          setCentury(event.target.value)\n          }/* this should update the value of the century */}>\n        <option value=\"any\">Any</option>\n        {\n          centuryList.map((item,index)=>{\n          return <option key={index} value={item.id}>{item.name}</option>\n        })/* map over the centuryList, return an <option /> */}\n      </select>\n     </fieldset>\n     <fieldset>\n      <label htmlFor=\"select-medium\">Medium <span className=\"medium-count\">({ mediumList.length })</span></label>\n      <select \n        name=\"medium\" \n        id=\"select-medium\"\n        value={medium} \n        onChange={(event) => {\n          setMedium(event.target.value)\n          }/* this should update the value of the century */}>\n        <option value=\"any\">Any</option>\n        {\n          mediumList.map((item,index)=>{\n          return <option key={index} value={item.id}>{item.name}</option>\n        })/* map over the centuryList, return an <option /> */}\n      </select>\n     </fieldset>\n    <button>SEARCH</button>\n  </form>\n  )\n}\n\nexport default Search;","import React from 'react';\n\n/**\n * Create/export a component called Title which uses this static HTML as the template:\n * \n * <div id=\"title\">\n *   <h1>\n *     The Art Collector\n *   </h1>\n *   <h5>\n *     Search the Harvard Art Museums' Private Collections\n *   </h5>\n * </div>\n */\n\nconst Title = () => {\n    return (\n    <div id=\"title\">\n        <h1>\n            The Art Collector\n        </h1>\n        <h5>\n            Search the Harvard Art Museums' Private Collections\n        </h5>\n    </div>)\n    \n}\nexport default Title;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\nimport {\n  Feature,\n  Loading,\n  Preview,\n  Search,\n  Title\n} from './components';\n\nconst App = () => {\n\n  const [searchResults,setSearchResults] = useState( {info:{}, records:[]} );\n  const [featuredResult,setFeaturedResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  console.log(featuredResult)\n\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   * \n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n\n  return <div className=\"app\">\n    {/* <Title /> is static, doesn't need any props */}\n    <Title />\n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\n    <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults} setFeaturedResult={setFeaturedResult}/>\n    {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\n    <Preview searchResults={searchResults} setIsLoading={setIsLoading} setSearchResults={setSearchResults} setFeaturedResult={setFeaturedResult} />\n    {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\n    <Feature featuredResult={featuredResult} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/>\n    {/* <Loading /> is static, but should only render when isLoading is true */}\n    \n    {\n      isLoading ? <Loading /> : null\n    }\n  </div>\n}\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\n ReactDOM.render(\n   <App />,\n   document.getElementById('app')\n )\n"],"sourceRoot":""}